ðŸš€ **Frontend Integration Prompt for React Native/Expo App**

I need to integrate my React Native/Expo app with a FastAPI backend for a family recognition system for dementia patients. The backend is running on http://localhost:8000 (or http://YOUR_IP:8000 for device testing).

## Backend API Details:

**Base URL:** `http://localhost:8000` (change to your computer's IP for device testing)

## Key API Endpoints:

### 1. Family Members Management
- **GET** `/api/family-members` - Get all family members
- **POST** `/api/family-members` - Add new family member (multipart form with name, relationship, and multiple images)
- **DELETE** `/api/family-members/{member_id}` - Delete a family member

### 2. Face Recognition
- **POST** `/api/recognition/identify` - Upload image to identify person (returns person name)
- **POST** `/api/recognition/start` - Start live recognition mode
- **GET** `/api/recognition/status` - Get current recognition status

### 3. Camera Operations
- **GET** `/api/camera/feed` - Video stream (for web view if needed)
- **POST** `/api/camera/start` - Start camera backend
- **GET** `/api/camera/status` - Get camera status

### 4. System Status
- **GET** `/api/status` - Get system health and stats
- **GET** `/health` - Simple health check

## Request/Response Examples:

### Add Family Member:
```javascript
const addFamilyMember = async (name, relationship, photos) => {
  const formData = new FormData();
  formData.append('name', name);
  formData.append('relationship', relationship);
  
  photos.forEach((photo, index) => {
    formData.append('images', {
      uri: photo.uri,
      type: 'image/jpeg',
      name: `photo_${index}.jpg`,
    });
  });

  const response = await fetch('http://YOUR_IP:8000/api/family-members', {
    method: 'POST',
    headers: {
      'Content-Type': 'multipart/form-data',
    },
    body: formData,
  });
  
  return await response.json();
};
```

### Identify Person from Photo:
```javascript
const identifyPerson = async (photoUri) => {
  const formData = new FormData();
  formData.append('image', {
    uri: photoUri,
    type: 'image/jpeg',
    name: 'identify.jpg',
  });

  const response = await fetch('http://YOUR_IP:8000/api/recognition/identify', {
    method: 'POST',
    body: formData,
  });
  
  const result = await response.json();
  // result.person_name contains the identified person's name
  return result;
};
```

### Get All Family Members:
```javascript
const getFamilyMembers = async () => {
  const response = await fetch('http://YOUR_IP:8000/api/family-members');
  return await response.json();
};
```

## Expected Response Formats:

### Family Member Response:
```json
{
  "name": "John",
  "relationship": "son",
  "date_added": "25-September-2025",
  "id": "John_son"
}
```

### Recognition Response:
```json
{
  "person_name": "John",
  "confidence": null,
  "status": "identified"
}
```

### Add Family Member Response:
```json
{
  "message": "Successfully added John (son)",
  "images_saved": 5,
  "total_family_members": 3
}
```

## App Features to Implement:

1. **Take Photo Screen** - Use camera to capture family member photos during setup
2. **Add Family Member Form** - Name input, relationship picker (spouse, child, parent, sibling, etc.)
3. **Who Is This Screen** - Take photo and identify person instantly
4. **Family Members List** - Show all registered family members
5. **Settings Screen** - Manage backend connection, delete members

## Technical Requirements:

- Use `expo-camera` or similar for photo capture
- Use `FormData` for multipart uploads
- Handle network errors gracefully (backend might be offline)
- Consider offline functionality for viewing family members
- Use proper TypeScript types for API responses
- Add loading states for API calls

## UI/UX Considerations for Dementia Patients:

- **Large buttons and text** (minimum 18px font size)
- **Simple, clear navigation** (avoid complex menus)
- **High contrast colors** (easy to see)
- **Immediate feedback** ("Taking photo...", "Identifying person...")
- **Voice prompts** if possible ("Point camera at the person")
- **Simple language** ("Who is this?" instead of "Facial Recognition")

## Error Handling:

Handle these scenarios:
- No internet connection
- Backend server down
- No face detected in photo
- Person not recognized
- Camera permission denied

## Additional API Usage Examples:

### Check Backend Status:
```javascript
const checkBackendStatus = async () => {
  try {
    const response = await fetch('http://YOUR_IP:8000/api/status');
    const status = await response.json();
    console.log(`Backend ready. ${status.total_family_members} family members registered.`);
    return status;
  } catch (error) {
    console.log('Backend not available');
    return null;
  }
};
```

### Delete Family Member:
```javascript
const deleteFamilyMember = async (memberId) => {
  const response = await fetch(`http://YOUR_IP:8000/api/family-members/${memberId}`, {
    method: 'DELETE',
  });
  
  return await response.json();
};
```

### Start Live Recognition (if using camera stream):
```javascript
const startLiveRecognition = async () => {
  const response = await fetch('http://YOUR_IP:8000/api/recognition/start', {
    method: 'POST',
  });
  
  return await response.json();
};
```

## Network Configuration:

For testing on physical devices:
1. Find your computer's IP address (ipconfig on Windows, ifconfig on Mac/Linux)
2. Replace `localhost` with your IP address (e.g., `http://192.168.1.100:8000`)
3. Make sure your phone and computer are on the same WiFi network
4. Ensure Windows Firewall allows connections on port 8000

## Recommended React Native/Expo Packages:

```bash
npm install expo-camera expo-media-library expo-file-system
# or
yarn add expo-camera expo-media-library expo-file-system
```

## Sample App Structure:
include a new button on the home page " WHO am i" that leads to this new feature
```
src/
  screens/
    HomeScreen.js          // Main menu
    AddFamilyScreen.js     // Add new family member
    IdentifyScreen.js      // "Who is this?" feature
    FamilyListScreen.js    // View all family members
    SettingsScreen.js      // App settings
  services/
    api.js                 // All API calls to FastAPI backend
  components/
    CameraView.js          // Camera component
    FamilyMemberCard.js    // Display family member info
```

Please connects to this FastAPI backend and provides a simple, senior-friendly interface for dementia patients to recognize their family members.

---

**Backend Server Details:**
- Server: FastAPI with automatic documentation
- Port: 8000
- Documentation: http://localhost:8000/docs (interactive API testing)
- Health Check: http://localhost:8000/health

**Quick Test:**
Open your browser and go to http://localhost:8000 - you should see API info if the backend is running.