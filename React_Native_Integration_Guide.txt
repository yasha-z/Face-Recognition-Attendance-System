🚀 **React Native Family Recognition App - Backend Integration Guide**

I need to create a React Native app that connects to my FastAPI backend for a family recognition system for dementia patients. The backend is running on http://10.200.253.165:8000 and provides the exact same functionality as the original Flask app.

## 🎯 **Required App Features (Mirror Flask App Functionality):**

### **1. Add Family Member Screen**
- **Name input field** (text input)
- **Relationship dropdown** (spouse, child, parent, sibling, grandchild, friend, caregiver, other)
- **Camera capture functionality** that takes **exactly 50 photos** automatically
- **Photo preview** showing count (e.g., "Photo 15/50 captured")
- **Large, senior-friendly buttons** and text (minimum 18px)
- **Automatic training** after photos are captured

### **2. "Who Is This?" Recognition Screen**
- **Large "Take Photo" button**
- **Camera view with face detection overlay** (green rectangle around faces)
- **Instant recognition results** displayed prominently
- **"Try Again" button** for another photo
- **Voice feedback** if possible ("This is John, your son")

### **3. Family Members List Screen**
- **Display all registered family members**
- **Show name, relationship, and date added**
- **Delete family member option**
- **Total count display**

### **4. Main Menu/Home Screen**
- **Large, clear navigation buttons**
- **System status display** (number of family members)
- **Simple, dementia-friendly design**

## 🔌 **Backend API Endpoints:**

**Base URL:** `http://10.200.253.165:8000`

### **Core Endpoints:**
- `POST /api/recognition/identify` - **Main recognition endpoint**
- `POST /api/family-members` - Add new family member with photos
- `GET /api/family-members` - Get all family members
- `GET /api/status` - System status
- `DELETE /api/family-members/{member_id}` - Delete family member

## 📱 **Implementation Requirements:**

### **Camera Integration:**
```javascript
// Use expo-camera for photo capture
import { Camera } from 'expo-camera';

// For adding family members - capture 50 photos automatically
const captureMultiplePhotos = async (memberName) => {
  const photos = [];
  
  for (let i = 0; i < 50; i++) {
    // Show progress: "Capturing photo 15/50"
    setProgress(`Capturing photo ${i + 1}/50`);
    
    const photo = await cameraRef.current.takePictureAsync({
      quality: 0.8,
      base64: false,
    });
    
    photos.push(photo);
    
    // Small delay between captures (like Flask app)
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  return photos;
};
```

### **Add Family Member API Call:**
```javascript
const addFamilyMember = async (name, relationship, photos) => {
  const formData = new FormData();
  formData.append('name', name);
  formData.append('relationship', relationship);
  
  // Add all 50 photos
  photos.forEach((photo, index) => {
    formData.append('images', {
      uri: photo.uri,
      type: 'image/jpeg',
      name: `${name}_${index}.jpg`,
    });
  });

  try {
    const response = await fetch('http://10.200.253.165:8000/api/family-members', {
      method: 'POST',
      body: formData,
      // Don't set Content-Type header - let it be automatic for FormData
    });
    
    const result = await response.json();
    
    if (response.ok) {
      // Show success message
      Alert.alert('Success', `${name} added successfully! Model is training in background.`);
      return result;
    } else {
      throw new Error(result.detail || 'Failed to add family member');
    }
  } catch (error) {
    Alert.alert('Error', `Failed to add family member: ${error.message}`);
    throw error;
  }
};
```

### **Face Recognition API Call:**
```javascript
const identifyPerson = async (photoUri) => {
  const formData = new FormData();
  formData.append('image', {
    uri: photoUri,
    type: 'image/jpeg',
    name: 'identify.jpg',
  });

  try {
    const response = await fetch('http://10.200.253.165:8000/api/recognition/identify', {
      method: 'POST',
      body: formData,
    });
    
    const result = await response.json();
    
    if (response.ok) {
      return result; // { person_name: "John", status: "identified" }
    } else {
      throw new Error(result.detail || 'Recognition failed');
    }
  } catch (error) {
    console.error('Recognition error:', error);
    return { person_name: 'Unknown', status: 'error' };
  }
};
```

### **Get Family Members:**
```javascript
const getFamilyMembers = async () => {
  try {
    const response = await fetch('http://10.200.253.165:8000/api/family-members');
    const result = await response.json();
    
    if (response.ok) {
      return result.family_members; // Array of family member objects
    } else {
      throw new Error('Failed to fetch family members');
    }
  } catch (error) {
    console.error('Error fetching family members:', error);
    return [];
  }
};
```

## 🎨 **UI/UX Requirements for Dementia Patients:**

### **Design Guidelines:**
- **Large buttons** (minimum 60px height)
- **High contrast colors** (black text on white background)
- **Simple navigation** (avoid complex menus)
- **Large text** (minimum 18px, headings 24px+)
- **Immediate feedback** ("Taking photo...", "Analyzing...", "Found: John!")
- **Voice announcements** when possible
- **Error handling** with clear, simple messages

### **Screen Flow:**
```
Home Screen
├── "Add Family Member" → Name Input → Relationship Picker → Photo Capture (50 photos) → Success
├── "Who Is This?" → Camera View → Take Photo → Recognition Result → Try Again?
└── "Family List" → List View → Delete Options
```

### **Photo Capture UI (Add Family Member):**
```javascript
// Show real-time progress during capture
<View style={styles.captureProgress}>
  <Text style={styles.largeText}>Adding: {memberName}</Text>
  <Text style={styles.progressText}>Photo {currentPhoto}/50</Text>
  <ProgressBar progress={currentPhoto / 50} />
  <Text style={styles.instruction}>Look at the camera</Text>
</View>
```

### **Recognition Results UI:**
```javascript
// Large, clear results display
<View style={styles.resultsContainer}>
  {result.status === 'identified' ? (
    <>
      <Text style={styles.successText}>This is:</Text>
      <Text style={styles.personName}>{result.person_name}</Text>
      <TouchableOpacity style={styles.tryAgainButton} onPress={takeAnotherPhoto}>
        <Text style={styles.buttonText}>Try Again</Text>
      </TouchableOpacity>
    </>
  ) : (
    <>
      <Text style={styles.errorText}>Person not recognized</Text>
      <TouchableOpacity style={styles.addPersonButton} onPress={goToAddPerson}>
        <Text style={styles.buttonText}>Add This Person</Text>
      </TouchableOpacity>
    </>
  )}
</View>
```

## 📦 **Required Dependencies:**
```bash
npm install expo-camera expo-media-library expo-file-system
# or
yarn add expo-camera expo-media-library expo-file-system
```

## 🔧 **Error Handling:**
Handle these scenarios gracefully:
- **No internet connection**
- **Backend server down**
- **Camera permission denied**
- **No face detected in photo**
- **Person not recognized**
- **Failed to add family member**

## 🌐 **Network Configuration:**
1. **Your computer's IP address is: 10.200.253.165**
   - No need to find it - it's already configured in the code!

2. **Test backend:** Open http://10.200.253.165:8000/docs in your phone's browser

3. **Ensure your phone and computer are on the same WiFi network**

4. **Test backend first:** Open http://10.200.253.165:8000/docs in your phone's browser

## 🎯 **Success Criteria:**
- ✅ Can add family members with 50 automatic photo captures
- ✅ Real-time photo counting during capture (like Flask app)
- ✅ Face recognition works with single photo capture
- ✅ Large, senior-friendly interface
- ✅ Family members list with delete functionality
- ✅ Proper error handling and user feedback
- ✅ Works offline for viewing family list (cache data)

## 🚀 **Quick Start Commands:**
```bash
npx create-expo-app FamilyRecognitionApp
cd FamilyRecognitionApp
npm install expo-camera expo-media-library expo-file-system
# Start development: npx expo start
```

**Important:** Make sure the FastAPI backend is running on http://10.200.253.165:8000 before testing the app!

The app should provide the exact same functionality as the Flask web app but optimized for mobile use by dementia patients - simple, clear, and reliable family member recognition.